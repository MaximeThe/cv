import isEmpty from 'lodash/isEmpty';
import { getAssetName, normalizeChunkId } from '../utils';
const IGNORE_PATTERN = /\.(map|LICENSE\.txt)$/;
export const extractAssets = (webpackStats) => {
    const webpackAssets = (webpackStats === null || webpackStats === void 0 ? void 0 : webpackStats.assets) || [];
    const webpackChunks = (webpackStats === null || webpackStats === void 0 ? void 0 : webpackStats.chunks) || [];
    const webpackEntrypoints = (webpackStats === null || webpackStats === void 0 ? void 0 : webpackStats.entrypoints) || {};
    const entrypointsAssets = Object.values(webpackEntrypoints)
        .map(({ assets: items }) => items.map((item) => {
        if (typeof item === 'object') {
            return item.name;
        }
        return item;
    }))
        .flat();
    const initialItems = webpackChunks
        .filter(({ initial }) => initial)
        .map(({ files }) => files)
        .flat();
    const normalizedChunks = webpackChunks.map(({ id, names, files }) => ({
        id: normalizeChunkId(id),
        name: names.join('+') || `chunk-${id}`,
        files,
    }));
    const assets = webpackAssets.reduce((aggregator, asset) => {
        const baseName = asset === null || asset === void 0 ? void 0 : asset.name.split('?')[0];
        if (IGNORE_PATTERN.test(baseName)) {
            return aggregator;
        }
        const assetChunk = normalizedChunks.find((chunk) => chunk.files.includes(asset.name));
        const normalizedName = getAssetName(baseName);
        const { size, name } = asset;
        return {
            ...aggregator,
            [normalizedName]: {
                name: baseName,
                value: size,
                isEntry: entrypointsAssets.includes(name),
                isInitial: initialItems.includes(name),
                isChunk: Boolean(assetChunk),
                ...(assetChunk ? { chunkId: assetChunk.id } : {}),
            },
        };
    }, {});
    return {
        metrics: {
            assets,
        },
        ...(!isEmpty(normalizedChunks)
            ? {
                meta: {
                    chunks: normalizedChunks.map(({ id, name }) => ({ id, name })),
                },
            }
            : {}),
    };
};
//# sourceMappingURL=assets.js.map